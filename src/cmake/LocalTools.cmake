#
# src/cmake/LocalTools.cmake
#
# written by SvOlli
# distributed as public domain
#

# set some Win32 specific settings
IF( WIN32 )
   SET( GUI_TYPE WIN32 )
ENDIF( WIN32 )

# set some Apple MacOS specific settings
IF( APPLE )
   SET( GUI_TYPE MACOSX_BUNDLE )
   # needs to be moved into app config
   #SET( MACOSX_BUNDLE_INFO_STRING "" )
   #SET( MACOSX_BUNDLE_ICON_FILE "" )
   #SET( MACOSX_BUNDLE_GUI_IDENTIFIER "" )
   #SET( MACOSX_BUNDLE_LONG_VERSION_STRING "" )
   #SET( MACOSX_BUNDLE_BUNDLE_NAME "" )
   #SET( MACOSX_BUNDLE_SHORT_VERSION_STRING "" )
   #SET( MACOSX_BUNDLE_BUNDLE_VERSION "" )
   #SET( MACOSX_BUNDLE_COPYRIGHT "" )
ENDIF( APPLE )

FUNCTION( ADD_SOURCE _NAME )

   SET( options h c hpp cpp private moc )
   CMAKE_PARSE_ARGUMENTS( ADD_SOURCE "${options}" "" "" ${ARGN} )

   IF( ADD_SOURCE_private )
      MESSAGE( STATUS "${_NAME}: private not implemented yet, adding as public" )
   ENDIF( ADD_SOURCE_private )
   IF( ADD_SOURCE_h AND ADD_SOURCE_hpp )
      MESSAGE( FATAL_ERROR "${_NAME} should only provide h or hpp" )
   ENDIF( ADD_SOURCE_h AND ADD_SOURCE_hpp )
   IF( ADD_SOURCE_c AND ADD_SOURCE_cpp )
      MESSAGE( FATAL_ERROR "${_NAME} should only provide c or cpp" )
   ENDIF( ADD_SOURCE_c AND ADD_SOURCE_cpp )

   IF( ADD_SOURCE_h )
#      MESSAGE( STATUS "adding header ${_NAME}.h" )
      SET( ${PROJECT_NAME}_HEADERS ${${PROJECT_NAME}_HEADERS} ${_NAME}.h PARENT_SCOPE )
      IF( ADD_SOURCE_moc )
         SET( ${PROJECT_NAME}_MOC_HEADERS ${${PROJECT_NAME}_MOC_HEADERS} ${_NAME}.h PARENT_SCOPE )
      ENDIF( ADD_SOURCE_moc )
   ENDIF( ADD_SOURCE_h )
   IF( ADD_SOURCE_hpp )
#      MESSAGE( STATUS "adding header ${_NAME}.hpp" )
      SET( ${PROJECT_NAME}_HEADERS ${${PROJECT_NAME}_HEADERS} ${_NAME}.hpp PARENT_SCOPE )
      IF( ADD_SOURCE_moc )
         SET( ${PROJECT_NAME}_MOC_HEADERS ${${PROJECT_NAME}_MOC_HEADERS} ${_NAME}.hpp PARENT_SCOPE )
      ENDIF( ADD_SOURCE_moc )
   ENDIF( ADD_SOURCE_hpp )
   IF( ADD_SOURCE_c )
#      MESSAGE( STATUS "adding source ${_NAME}.c" )
      SET( ${PROJECT_NAME}_SOURCES ${${PROJECT_NAME}_SOURCES} ${_NAME}.c PARENT_SCOPE )
   ENDIF( ADD_SOURCE_c )
   IF( ADD_SOURCE_cpp )
#      MESSAGE( STATUS "adding source ${_NAME}.cpp" )
      SET( ${PROJECT_NAME}_SOURCES ${${PROJECT_NAME}_SOURCES} ${_NAME}.cpp PARENT_SCOPE )
   ENDIF( ADD_SOURCE_cpp )

#   MESSAGE( STATUS "${PROJECT_NAME}_HEADERS = ${${PROJECT_NAME}_HEADERS}" )
#   MESSAGE( STATUS "${PROJECT_NAME}_SOURCES = ${${PROJECT_NAME}_SOURCES}" )

ENDFUNCTION( ADD_SOURCE )


FUNCTION( PROPAGATE_LIBRARY _NAME )

   SET( options LIBNAME ADD )
   CMAKE_PARSE_ARGUMENTS( PROPAGATE_LIBRARY "" "${options}" "" ${ARGN} )

   IF( DEFINED PROPAGATE_LIBRARY_LIBNAME )
      SET( LIBNAME ${PROPAGATE_LIBRARY_LIBNAME} )
   ELSE( DEFINED PROPAGATE_LIBRARY_LIBNAME )
      SET( LIBNAME ${_NAME} )
   ENDIF( DEFINED PROPAGATE_LIBRARY_LIBNAME )

   STRING( TOUPPER ${_NAME} _NAME_UPPER )
   STRING( TOLOWER ${_NAME} _NAME_LOWER )

   SET( ${_NAME_UPPER}_INCLUDE_DIR ${${_NAME}_SOURCE_DIR} CACHE PATH "${_NAME} include directory" )
   SET( ${_NAME_UPPER}_LIBRARY_DIR ${${_NAME}_BINARY_DIR} CACHE PATH "${_NAME} library directory" )
   SET( ${_NAME_UPPER}_LIBRARY_FLAGS "-L${${_NAME}_BINARY_DIR} -l${LIBNAME}" CACHE STRING "{_NAME} linker flags")
   IF( DEFINED PROPAGATE_LIBRARY_ADD )
      MESSAGE( STATUS "trying to add ${${_NAME_UPPER}_LIBRARY_FLAGS} ${PROPAGATE_LIBRARY_ADD}" )
      SET( ${_NAME_UPPER}_LIBRARY_FLAGS "${${_NAME_UPPER}_LIBRARY_FLAGS} ${PROPAGATE_LIBRARY_ADD}" CACHE STRING "{_NAME} linker flags")
   ENDIF( DEFINED PROPAGATE_LIBRARY_ADD )

   MESSAGE( STATUS "propagating local library ${_NAME}" )
   MESSAGE( STATUS "  include dir: ${_NAME_UPPER}_INCLUDE_DIR=${${_NAME_UPPER}_INCLUDE_DIR}" )
   MESSAGE( STATUS "  library dir: ${_NAME_UPPER}_LIBRARY_DIR=${${_NAME_UPPER}_LIBRARY_DIR}" )
   MESSAGE( STATUS "  library flag: ${_NAME_UPPER}_LIBRARY_FLAGS=${${_NAME_UPPER}_LIBRARY_FLAGS}" )

ENDFUNCTION( PROPAGATE_LIBRARY )

